
EXT_INTR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000055e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  000005d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000604  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ca7  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007aa  00000000  00000000  000013ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007a9  00000000  00000000  00001ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000290  00000000  00000000  00002354  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058a  00000000  00000000  000025e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a86  00000000  00000000  00002b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000035f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 2e 02 	jmp	0x45c	; 0x45c <__vector_1>
   8:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <__vector_2>
   c:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 36       	cpi	r26, 0x68	; 104
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 85 00 	call	0x10a	; 0x10a <main>
  74:	0c 94 ad 02 	jmp	0x55a	; 0x55a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <LED_Toggle>:
@brief Toggle the state of the LED.
This function toggles the state of the LED connected to PORTA, PIN0.
If the LED is currently ON, it will be turned OFF, and vice versa.
*/
void LED_Toggle(){
	DIO_voidTogglePin(Global_u8PortId,Global_u8PinId);	
  7c:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  80:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Global_u8PortId>
  84:	0e 94 85 01 	call	0x30a	; 0x30a <DIO_voidTogglePin>
  88:	08 95       	ret

0000008a <LED_Interrupt_INIT>:
This function initializes and enables the specified external interrupt (INT0, INT1, or INT2) with the provided edge triggering mode.
Additionally, it sets the necessary configuration for the interrupt pin (direction and initial value).
@param Copy_u8ExtIntNum: The external interrupt number (INT0, INT1, or INT2) to be initialized and enabled.
@param Copy_u8EdgeIntSource: The edge triggering mode for the external interrupt (Falling, Rising, Any Change, Low Level).
*/
void LED_Interrupt_INIT(u8 Copy_u8ExtIntNum , u8 Copy_u8EdgeIntSource){
  8a:	cf 93       	push	r28
  8c:	c6 2f       	mov	r28, r22
	
	EXTINT_voidEnable(Copy_u8ExtIntNum,Copy_u8EdgeIntSource);
  8e:	0e 94 b9 01 	call	0x372	; 0x372 <EXTINT_voidEnable>
	switch (Copy_u8EdgeIntSource){
  92:	c2 30       	cpi	r28, 0x02	; 2
  94:	79 f0       	breq	.+30     	; 0xb4 <LED_Interrupt_INIT+0x2a>
  96:	c3 30       	cpi	r28, 0x03	; 3
  98:	c1 f0       	breq	.+48     	; 0xca <LED_Interrupt_INIT+0x40>
  9a:	c1 30       	cpi	r28, 0x01	; 1
  9c:	01 f5       	brne	.+64     	; 0xde <LED_Interrupt_INIT+0x54>
		case EXTINT_INT0:
			DIO_voidSetPinDirection(DIO_u8_PORTD,DIO_u8_PIN2,DIO_u8_INPUT);
  9e:	40 e0       	ldi	r20, 0x00	; 0
  a0:	62 e0       	ldi	r22, 0x02	; 2
  a2:	83 e0       	ldi	r24, 0x03	; 3
  a4:	0e 94 0c 01 	call	0x218	; 0x218 <DIO_voidSetPinDirection>
			DIO_voidSetPinValue(DIO_u8_PORTD,DIO_u8_PIN2,DIO_u8_HIGH);
  a8:	41 e0       	ldi	r20, 0x01	; 1
  aa:	62 e0       	ldi	r22, 0x02	; 2
  ac:	83 e0       	ldi	r24, 0x03	; 3
  ae:	0e 94 93 00 	call	0x126	; 0x126 <DIO_voidSetPinValue>
			break;
  b2:	15 c0       	rjmp	.+42     	; 0xde <LED_Interrupt_INIT+0x54>
		case EXTINT_INT1:
			DIO_voidSetPinDirection(DIO_u8_PORTD,DIO_u8_PIN3,DIO_u8_INPUT);
  b4:	40 e0       	ldi	r20, 0x00	; 0
  b6:	63 e0       	ldi	r22, 0x03	; 3
  b8:	83 e0       	ldi	r24, 0x03	; 3
  ba:	0e 94 0c 01 	call	0x218	; 0x218 <DIO_voidSetPinDirection>
			DIO_voidSetPinValue(DIO_u8_PORTD,DIO_u8_PIN3,DIO_u8_HIGH);
  be:	41 e0       	ldi	r20, 0x01	; 1
  c0:	63 e0       	ldi	r22, 0x03	; 3
  c2:	83 e0       	ldi	r24, 0x03	; 3
  c4:	0e 94 93 00 	call	0x126	; 0x126 <DIO_voidSetPinValue>
		break;	
  c8:	0a c0       	rjmp	.+20     	; 0xde <LED_Interrupt_INIT+0x54>
		case EXTINT_INT2:
			DIO_voidSetPinDirection(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_INPUT);
  ca:	40 e0       	ldi	r20, 0x00	; 0
  cc:	62 e0       	ldi	r22, 0x02	; 2
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	0e 94 0c 01 	call	0x218	; 0x218 <DIO_voidSetPinDirection>
			DIO_voidSetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_HIGH);
  d4:	41 e0       	ldi	r20, 0x01	; 1
  d6:	62 e0       	ldi	r22, 0x02	; 2
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	0e 94 93 00 	call	0x126	; 0x126 <DIO_voidSetPinValue>
		break;

	}
	
}
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <LED_INIT>:

@brief Initialize the LED pin as an output.
This function sets the direction of the LED pin (connected to PORTA, PIN0) as an output.
It prepares the pin to be used to control an LED, allowing it to be turned ON or OFF by writing to the pin.
*/
void LED_INIT(u8 Copy_u8PortId, u8 Copy_u8PinId){
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	d8 2f       	mov	r29, r24
  e8:	c6 2f       	mov	r28, r22
	DIO_voidSetPinDirection(Copy_u8PortId,Copy_u8PinId,DIO_u8_OUTPUT);
  ea:	41 e0       	ldi	r20, 0x01	; 1
  ec:	0e 94 0c 01 	call	0x218	; 0x218 <DIO_voidSetPinDirection>
	Global_u8PortId=Copy_u8PortId;
  f0:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <Global_u8PortId>
	Global_u8PinId=Copy_u8PinId ;
  f4:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <__DATA_REGION_ORIGIN__>
}
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <LED_ISR>:
@brief LED Interrupt Service Routine (ISR) callback function.
This function is an Interrupt Service Routine (ISR) callback that is called when the external interrupt INT0 is triggered.
When the INT0 external interrupt occurs, this function is executed, and it calls the LED_Toggle() function to toggle the state of the LED.
*/
void LED_ISR(u8 Copy_u8EdgeIntSource){
	EXTINT_voidSetCallBack(LED_Toggle,Copy_u8EdgeIntSource);
  fe:	68 2f       	mov	r22, r24
 100:	8e e3       	ldi	r24, 0x3E	; 62
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 25 02 	call	0x44a	; 0x44a <EXTINT_voidSetCallBack>
 108:	08 95       	ret

0000010a <main>:

#include "../HAL/LED.h"

int main(void)
{
	GIE_voidGlobalInterruptEnable();
 10a:	0e 94 a3 02 	call	0x546	; 0x546 <GIE_voidGlobalInterruptEnable>
	
	LED_Interrupt_INIT(EXTINT_INT0,EXTINT_FALLING_EDGE);/*initiate the interrupt*/
 10e:	61 e0       	ldi	r22, 0x01	; 1
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	0e 94 45 00 	call	0x8a	; 0x8a <LED_Interrupt_INIT>
	LED_INIT(DIO_u8_PORTA,DIO_u8_PIN0);/*initiate the LED*/
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	0e 94 71 00 	call	0xe2	; 0xe2 <LED_INIT>
	LED_ISR(EXTINT_INT0);/*RUN LED ISR*/
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	0e 94 7f 00 	call	0xfe	; 0xfe <LED_ISR>
 124:	ff cf       	rjmp	.-2      	; 0x124 <main+0x1a>

00000126 <DIO_voidSetPinValue>:
/*****************************************************************************************************/

void DIO_voidSetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8Value)
{
	
		switch(Copy_u8PortId)
 126:	81 30       	cpi	r24, 0x01	; 1
 128:	19 f1       	breq	.+70     	; 0x170 <DIO_voidSetPinValue+0x4a>
 12a:	30 f0       	brcs	.+12     	; 0x138 <DIO_voidSetPinValue+0x12>
 12c:	82 30       	cpi	r24, 0x02	; 2
 12e:	e1 f1       	breq	.+120    	; 0x1a8 <DIO_voidSetPinValue+0x82>
 130:	83 30       	cpi	r24, 0x03	; 3
 132:	09 f4       	brne	.+2      	; 0x136 <DIO_voidSetPinValue+0x10>
 134:	55 c0       	rjmp	.+170    	; 0x1e0 <DIO_voidSetPinValue+0xba>
 136:	08 95       	ret
		{
			case DIO_u8_PORTA:  switch(Copy_u8Value)
 138:	44 23       	and	r20, r20
 13a:	19 f0       	breq	.+6      	; 0x142 <DIO_voidSetPinValue+0x1c>
 13c:	41 30       	cpi	r20, 0x01	; 1
 13e:	69 f0       	breq	.+26     	; 0x15a <DIO_voidSetPinValue+0x34>
 140:	08 95       	ret
			{
				case  DIO_u8_LOW:   CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);     break;
 142:	2b b3       	in	r18, 0x1b	; 27
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_voidSetPinValue+0x28>
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	6a 95       	dec	r22
 150:	e2 f7       	brpl	.-8      	; 0x14a <DIO_voidSetPinValue+0x24>
 152:	80 95       	com	r24
 154:	82 23       	and	r24, r18
 156:	8b bb       	out	0x1b, r24	; 27
 158:	08 95       	ret
				case  DIO_u8_HIGH:  SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);     break;
 15a:	2b b3       	in	r18, 0x1b	; 27
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_voidSetPinValue+0x40>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_voidSetPinValue+0x3c>
 16a:	82 2b       	or	r24, r18
 16c:	8b bb       	out	0x1b, r24	; 27
 16e:	08 95       	ret
			}
			break;
			case DIO_u8_PORTB:  switch(Copy_u8Value)
 170:	44 23       	and	r20, r20
 172:	19 f0       	breq	.+6      	; 0x17a <DIO_voidSetPinValue+0x54>
 174:	41 30       	cpi	r20, 0x01	; 1
 176:	69 f0       	breq	.+26     	; 0x192 <DIO_voidSetPinValue+0x6c>
 178:	08 95       	ret
			{
				case  DIO_u8_LOW:   CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);     break;
 17a:	28 b3       	in	r18, 0x18	; 24
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	02 c0       	rjmp	.+4      	; 0x186 <DIO_voidSetPinValue+0x60>
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	6a 95       	dec	r22
 188:	e2 f7       	brpl	.-8      	; 0x182 <DIO_voidSetPinValue+0x5c>
 18a:	80 95       	com	r24
 18c:	82 23       	and	r24, r18
 18e:	88 bb       	out	0x18, r24	; 24
 190:	08 95       	ret
				case  DIO_u8_HIGH:  SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);     break;
 192:	28 b3       	in	r18, 0x18	; 24
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	02 c0       	rjmp	.+4      	; 0x19e <DIO_voidSetPinValue+0x78>
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	6a 95       	dec	r22
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <DIO_voidSetPinValue+0x74>
 1a2:	82 2b       	or	r24, r18
 1a4:	88 bb       	out	0x18, r24	; 24
 1a6:	08 95       	ret
			}
			break;
			case DIO_u8_PORTC:  switch(Copy_u8Value)
 1a8:	44 23       	and	r20, r20
 1aa:	19 f0       	breq	.+6      	; 0x1b2 <DIO_voidSetPinValue+0x8c>
 1ac:	41 30       	cpi	r20, 0x01	; 1
 1ae:	69 f0       	breq	.+26     	; 0x1ca <DIO_voidSetPinValue+0xa4>
 1b0:	08 95       	ret
			{
				case  DIO_u8_LOW:   CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);     break;
 1b2:	25 b3       	in	r18, 0x15	; 21
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_voidSetPinValue+0x98>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_voidSetPinValue+0x94>
 1c2:	80 95       	com	r24
 1c4:	82 23       	and	r24, r18
 1c6:	85 bb       	out	0x15, r24	; 21
 1c8:	08 95       	ret
				case  DIO_u8_HIGH:  SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);     break;
 1ca:	25 b3       	in	r18, 0x15	; 21
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_voidSetPinValue+0xb0>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_voidSetPinValue+0xac>
 1da:	82 2b       	or	r24, r18
 1dc:	85 bb       	out	0x15, r24	; 21
 1de:	08 95       	ret
			}
			break;
			case DIO_u8_PORTD:  switch(Copy_u8Value)
 1e0:	44 23       	and	r20, r20
 1e2:	19 f0       	breq	.+6      	; 0x1ea <DIO_voidSetPinValue+0xc4>
 1e4:	41 30       	cpi	r20, 0x01	; 1
 1e6:	69 f0       	breq	.+26     	; 0x202 <DIO_voidSetPinValue+0xdc>
 1e8:	08 95       	ret
			{
				case  DIO_u8_LOW:   CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);     break;
 1ea:	22 b3       	in	r18, 0x12	; 18
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_voidSetPinValue+0xd0>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	6a 95       	dec	r22
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_voidSetPinValue+0xcc>
 1fa:	80 95       	com	r24
 1fc:	82 23       	and	r24, r18
 1fe:	82 bb       	out	0x12, r24	; 18
 200:	08 95       	ret
				case  DIO_u8_HIGH:  SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);     break;
 202:	22 b3       	in	r18, 0x12	; 18
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_voidSetPinValue+0xe8>
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_voidSetPinValue+0xe4>
 212:	82 2b       	or	r24, r18
 214:	82 bb       	out	0x12, r24	; 18
 216:	08 95       	ret

00000218 <DIO_voidSetPinDirection>:
/* Description:	function used to decide the usage of a specific pin inside a defined port either input or output    */
/********************************************************************************************************************/
void DIO_voidSetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8Direction)
{

		switch(Copy_u8PortId)
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	19 f1       	breq	.+70     	; 0x262 <DIO_voidSetPinDirection+0x4a>
 21c:	30 f0       	brcs	.+12     	; 0x22a <DIO_voidSetPinDirection+0x12>
 21e:	82 30       	cpi	r24, 0x02	; 2
 220:	e1 f1       	breq	.+120    	; 0x29a <DIO_voidSetPinDirection+0x82>
 222:	83 30       	cpi	r24, 0x03	; 3
 224:	09 f4       	brne	.+2      	; 0x228 <DIO_voidSetPinDirection+0x10>
 226:	55 c0       	rjmp	.+170    	; 0x2d2 <DIO_voidSetPinDirection+0xba>
 228:	08 95       	ret
		{
			case DIO_u8_PORTA:  switch(Copy_u8Direction)
 22a:	44 23       	and	r20, r20
 22c:	19 f0       	breq	.+6      	; 0x234 <DIO_voidSetPinDirection+0x1c>
 22e:	41 30       	cpi	r20, 0x01	; 1
 230:	69 f0       	breq	.+26     	; 0x24c <DIO_voidSetPinDirection+0x34>
 232:	08 95       	ret
			{
				case  DIO_u8_INPUT:   CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);     break;
 234:	2a b3       	in	r18, 0x1a	; 26
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_voidSetPinDirection+0x28>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	6a 95       	dec	r22
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_voidSetPinDirection+0x24>
 244:	80 95       	com	r24
 246:	82 23       	and	r24, r18
 248:	8a bb       	out	0x1a, r24	; 26
 24a:	08 95       	ret
				case  DIO_u8_OUTPUT:  SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);     break;
 24c:	2a b3       	in	r18, 0x1a	; 26
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_voidSetPinDirection+0x40>
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	6a 95       	dec	r22
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_voidSetPinDirection+0x3c>
 25c:	82 2b       	or	r24, r18
 25e:	8a bb       	out	0x1a, r24	; 26
 260:	08 95       	ret
			}
			break;
			case DIO_u8_PORTB:  switch(Copy_u8Direction)
 262:	44 23       	and	r20, r20
 264:	19 f0       	breq	.+6      	; 0x26c <DIO_voidSetPinDirection+0x54>
 266:	41 30       	cpi	r20, 0x01	; 1
 268:	69 f0       	breq	.+26     	; 0x284 <DIO_voidSetPinDirection+0x6c>
 26a:	08 95       	ret
			{
				case  DIO_u8_INPUT:   CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);     break;
 26c:	27 b3       	in	r18, 0x17	; 23
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_voidSetPinDirection+0x60>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_voidSetPinDirection+0x5c>
 27c:	80 95       	com	r24
 27e:	82 23       	and	r24, r18
 280:	87 bb       	out	0x17, r24	; 23
 282:	08 95       	ret
				case  DIO_u8_OUTPUT:  SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);     break;
 284:	27 b3       	in	r18, 0x17	; 23
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_voidSetPinDirection+0x78>
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_voidSetPinDirection+0x74>
 294:	82 2b       	or	r24, r18
 296:	87 bb       	out	0x17, r24	; 23
 298:	08 95       	ret
			}
			break;
			case DIO_u8_PORTC:  switch(Copy_u8Direction)
 29a:	44 23       	and	r20, r20
 29c:	19 f0       	breq	.+6      	; 0x2a4 <DIO_voidSetPinDirection+0x8c>
 29e:	41 30       	cpi	r20, 0x01	; 1
 2a0:	69 f0       	breq	.+26     	; 0x2bc <DIO_voidSetPinDirection+0xa4>
 2a2:	08 95       	ret
			{
				case  DIO_u8_INPUT:   CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);     break;
 2a4:	24 b3       	in	r18, 0x14	; 20
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_voidSetPinDirection+0x98>
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	6a 95       	dec	r22
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_voidSetPinDirection+0x94>
 2b4:	80 95       	com	r24
 2b6:	82 23       	and	r24, r18
 2b8:	84 bb       	out	0x14, r24	; 20
 2ba:	08 95       	ret
				case  DIO_u8_OUTPUT:  SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);     break;
 2bc:	24 b3       	in	r18, 0x14	; 20
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_voidSetPinDirection+0xb0>
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_voidSetPinDirection+0xac>
 2cc:	82 2b       	or	r24, r18
 2ce:	84 bb       	out	0x14, r24	; 20
 2d0:	08 95       	ret
			}
			break;
			case DIO_u8_PORTD:  switch(Copy_u8Direction)
 2d2:	44 23       	and	r20, r20
 2d4:	19 f0       	breq	.+6      	; 0x2dc <DIO_voidSetPinDirection+0xc4>
 2d6:	41 30       	cpi	r20, 0x01	; 1
 2d8:	69 f0       	breq	.+26     	; 0x2f4 <DIO_voidSetPinDirection+0xdc>
 2da:	08 95       	ret
			{
				case  DIO_u8_INPUT:   CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);     break;
 2dc:	21 b3       	in	r18, 0x11	; 17
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_voidSetPinDirection+0xd0>
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	6a 95       	dec	r22
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_voidSetPinDirection+0xcc>
 2ec:	80 95       	com	r24
 2ee:	82 23       	and	r24, r18
 2f0:	81 bb       	out	0x11, r24	; 17
 2f2:	08 95       	ret
				case  DIO_u8_OUTPUT:  SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);     break;
 2f4:	21 b3       	in	r18, 0x11	; 17
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_voidSetPinDirection+0xe8>
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	6a 95       	dec	r22
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_voidSetPinDirection+0xe4>
 304:	82 2b       	or	r24, r18
 306:	81 bb       	out	0x11, r24	; 17
 308:	08 95       	ret

0000030a <DIO_voidTogglePin>:
/* Description:	function used to toggle pins of ports  */
/********************************************************************************************************************/
void DIO_voidTogglePin(u8 Copy_u8PortId, u8 Copy_u8PinId)
{

	switch(Copy_u8PortId)
 30a:	81 30       	cpi	r24, 0x01	; 1
 30c:	89 f0       	breq	.+34     	; 0x330 <DIO_voidTogglePin+0x26>
 30e:	28 f0       	brcs	.+10     	; 0x31a <DIO_voidTogglePin+0x10>
 310:	82 30       	cpi	r24, 0x02	; 2
 312:	c9 f0       	breq	.+50     	; 0x346 <DIO_voidTogglePin+0x3c>
 314:	83 30       	cpi	r24, 0x03	; 3
 316:	11 f1       	breq	.+68     	; 0x35c <DIO_voidTogglePin+0x52>
 318:	08 95       	ret
	{
		case DIO_u8_PORTA: TOG_BIT(DIO_u8_PORTA_REG,Copy_u8PinId); break;
 31a:	2b b3       	in	r18, 0x1b	; 27
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	02 c0       	rjmp	.+4      	; 0x326 <DIO_voidTogglePin+0x1c>
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	6a 95       	dec	r22
 328:	e2 f7       	brpl	.-8      	; 0x322 <DIO_voidTogglePin+0x18>
 32a:	82 27       	eor	r24, r18
 32c:	8b bb       	out	0x1b, r24	; 27
 32e:	08 95       	ret
		
		case DIO_u8_PORTB: TOG_BIT(DIO_u8_PORTA_REG,Copy_u8PinId); break;
 330:	2b b3       	in	r18, 0x1b	; 27
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_voidTogglePin+0x32>
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	6a 95       	dec	r22
 33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_voidTogglePin+0x2e>
 340:	82 27       	eor	r24, r18
 342:	8b bb       	out	0x1b, r24	; 27
 344:	08 95       	ret
		
		case DIO_u8_PORTC: TOG_BIT(DIO_u8_PORTA_REG,Copy_u8PinId); break;
 346:	2b b3       	in	r18, 0x1b	; 27
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	02 c0       	rjmp	.+4      	; 0x352 <DIO_voidTogglePin+0x48>
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	6a 95       	dec	r22
 354:	e2 f7       	brpl	.-8      	; 0x34e <DIO_voidTogglePin+0x44>
 356:	82 27       	eor	r24, r18
 358:	8b bb       	out	0x1b, r24	; 27
 35a:	08 95       	ret
		
		case DIO_u8_PORTD: TOG_BIT(DIO_u8_PORTA_REG,Copy_u8PinId); break;
 35c:	2b b3       	in	r18, 0x1b	; 27
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_voidTogglePin+0x5e>
 364:	88 0f       	add	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	6a 95       	dec	r22
 36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_voidTogglePin+0x5a>
 36c:	82 27       	eor	r24, r18
 36e:	8b bb       	out	0x1b, r24	; 27
 370:	08 95       	ret

00000372 <EXTINT_voidEnable>:
	switch (Copy_u8ExtIntNum)
	{
		//PUT SOME CODE HERE
		case EXTINT_INT0:	CLR_BIT(GICR,GICR_INT0);	break;
		case EXTINT_INT1:	CLR_BIT(GICR,GICR_INT1);	break;
		case EXTINT_INT2:	CLR_BIT(GICR,GICR_INT2);	break;
 372:	82 30       	cpi	r24, 0x02	; 2
 374:	81 f1       	breq	.+96     	; 0x3d6 <EXTINT_voidEnable+0x64>
 376:	83 30       	cpi	r24, 0x03	; 3
 378:	09 f4       	brne	.+2      	; 0x37c <EXTINT_voidEnable+0xa>
 37a:	57 c0       	rjmp	.+174    	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 37c:	81 30       	cpi	r24, 0x01	; 1
 37e:	09 f0       	breq	.+2      	; 0x382 <EXTINT_voidEnable+0x10>
 380:	63 c0       	rjmp	.+198    	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 382:	62 30       	cpi	r22, 0x02	; 2
 384:	81 f0       	breq	.+32     	; 0x3a6 <EXTINT_voidEnable+0x34>
 386:	18 f4       	brcc	.+6      	; 0x38e <EXTINT_voidEnable+0x1c>
 388:	61 30       	cpi	r22, 0x01	; 1
 38a:	31 f0       	breq	.+12     	; 0x398 <EXTINT_voidEnable+0x26>
 38c:	20 c0       	rjmp	.+64     	; 0x3ce <EXTINT_voidEnable+0x5c>
 38e:	63 30       	cpi	r22, 0x03	; 3
 390:	89 f0       	breq	.+34     	; 0x3b4 <EXTINT_voidEnable+0x42>
 392:	64 30       	cpi	r22, 0x04	; 4
 394:	b1 f0       	breq	.+44     	; 0x3c2 <EXTINT_voidEnable+0x50>
 396:	1b c0       	rjmp	.+54     	; 0x3ce <EXTINT_voidEnable+0x5c>
 398:	85 b7       	in	r24, 0x35	; 53
 39a:	8e 7f       	andi	r24, 0xFE	; 254
 39c:	85 bf       	out	0x35, r24	; 53
 39e:	85 b7       	in	r24, 0x35	; 53
 3a0:	82 60       	ori	r24, 0x02	; 2
 3a2:	85 bf       	out	0x35, r24	; 53
 3a4:	14 c0       	rjmp	.+40     	; 0x3ce <EXTINT_voidEnable+0x5c>
 3a6:	85 b7       	in	r24, 0x35	; 53
 3a8:	81 60       	ori	r24, 0x01	; 1
 3aa:	85 bf       	out	0x35, r24	; 53
 3ac:	85 b7       	in	r24, 0x35	; 53
 3ae:	82 60       	ori	r24, 0x02	; 2
 3b0:	85 bf       	out	0x35, r24	; 53
 3b2:	0d c0       	rjmp	.+26     	; 0x3ce <EXTINT_voidEnable+0x5c>
 3b4:	85 b7       	in	r24, 0x35	; 53
 3b6:	81 60       	ori	r24, 0x01	; 1
 3b8:	85 bf       	out	0x35, r24	; 53
 3ba:	85 b7       	in	r24, 0x35	; 53
 3bc:	8d 7f       	andi	r24, 0xFD	; 253
 3be:	85 bf       	out	0x35, r24	; 53
 3c0:	06 c0       	rjmp	.+12     	; 0x3ce <EXTINT_voidEnable+0x5c>
 3c2:	85 b7       	in	r24, 0x35	; 53
 3c4:	8e 7f       	andi	r24, 0xFE	; 254
 3c6:	85 bf       	out	0x35, r24	; 53
 3c8:	85 b7       	in	r24, 0x35	; 53
 3ca:	8d 7f       	andi	r24, 0xFD	; 253
 3cc:	85 bf       	out	0x35, r24	; 53
 3ce:	8b b7       	in	r24, 0x3b	; 59
 3d0:	80 64       	ori	r24, 0x40	; 64
 3d2:	8b bf       	out	0x3b, r24	; 59
 3d4:	08 95       	ret
 3d6:	62 30       	cpi	r22, 0x02	; 2
 3d8:	81 f0       	breq	.+32     	; 0x3fa <EXTINT_voidEnable+0x88>
 3da:	18 f4       	brcc	.+6      	; 0x3e2 <EXTINT_voidEnable+0x70>
 3dc:	61 30       	cpi	r22, 0x01	; 1
 3de:	31 f0       	breq	.+12     	; 0x3ec <EXTINT_voidEnable+0x7a>
 3e0:	20 c0       	rjmp	.+64     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 3e2:	63 30       	cpi	r22, 0x03	; 3
 3e4:	89 f0       	breq	.+34     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3e6:	64 30       	cpi	r22, 0x04	; 4
 3e8:	b1 f0       	breq	.+44     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 3ea:	1b c0       	rjmp	.+54     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 3ec:	85 b7       	in	r24, 0x35	; 53
 3ee:	8b 7f       	andi	r24, 0xFB	; 251
 3f0:	85 bf       	out	0x35, r24	; 53
 3f2:	85 b7       	in	r24, 0x35	; 53
 3f4:	88 60       	ori	r24, 0x08	; 8
 3f6:	85 bf       	out	0x35, r24	; 53
 3f8:	14 c0       	rjmp	.+40     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 3fa:	85 b7       	in	r24, 0x35	; 53
 3fc:	84 60       	ori	r24, 0x04	; 4
 3fe:	85 bf       	out	0x35, r24	; 53
 400:	85 b7       	in	r24, 0x35	; 53
 402:	88 60       	ori	r24, 0x08	; 8
 404:	85 bf       	out	0x35, r24	; 53
 406:	0d c0       	rjmp	.+26     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 408:	85 b7       	in	r24, 0x35	; 53
 40a:	84 60       	ori	r24, 0x04	; 4
 40c:	85 bf       	out	0x35, r24	; 53
 40e:	85 b7       	in	r24, 0x35	; 53
 410:	87 7f       	andi	r24, 0xF7	; 247
 412:	85 bf       	out	0x35, r24	; 53
 414:	06 c0       	rjmp	.+12     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 416:	85 b7       	in	r24, 0x35	; 53
 418:	8b 7f       	andi	r24, 0xFB	; 251
 41a:	85 bf       	out	0x35, r24	; 53
 41c:	85 b7       	in	r24, 0x35	; 53
 41e:	87 7f       	andi	r24, 0xF7	; 247
 420:	85 bf       	out	0x35, r24	; 53
 422:	8b b7       	in	r24, 0x3b	; 59
 424:	80 68       	ori	r24, 0x80	; 128
 426:	8b bf       	out	0x3b, r24	; 59
 428:	08 95       	ret
 42a:	61 30       	cpi	r22, 0x01	; 1
 42c:	19 f0       	breq	.+6      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 42e:	62 30       	cpi	r22, 0x02	; 2
 430:	29 f0       	breq	.+10     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 432:	07 c0       	rjmp	.+14     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 434:	84 b7       	in	r24, 0x34	; 52
 436:	8f 7b       	andi	r24, 0xBF	; 191
 438:	84 bf       	out	0x34, r24	; 52
 43a:	03 c0       	rjmp	.+6      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 43c:	84 b7       	in	r24, 0x34	; 52
 43e:	80 64       	ori	r24, 0x40	; 64
 440:	84 bf       	out	0x34, r24	; 52
 442:	8b b7       	in	r24, 0x3b	; 59
 444:	80 62       	ori	r24, 0x20	; 32
 446:	8b bf       	out	0x3b, r24	; 59
 448:	08 95       	ret

0000044a <EXTINT_voidSetCallBack>:
@param Copy_pfun: Pointer to the function to be called when the external interrupt occurs.
@param Copy_u8ExtIntIndex: The index of the external interrupt (INT0, INT1, or INT2) for which the callback is set.
*/
void EXTINT_voidSetCallBack(void(*Copy_pfun)(void),u8 Copy_u8ExtIntIndex)
{
	EXTINT_ApfuncEXTINT[Copy_u8ExtIntIndex] = Copy_pfun;
 44a:	e6 2f       	mov	r30, r22
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	ee 0f       	add	r30, r30
 450:	ff 1f       	adc	r31, r31
 452:	ee 59       	subi	r30, 0x9E	; 158
 454:	ff 4f       	sbci	r31, 0xFF	; 255
 456:	91 83       	std	Z+1, r25	; 0x01
 458:	80 83       	st	Z, r24
 45a:	08 95       	ret

0000045c <__vector_1>:
/* ISR Function for External Interrupt 0 */
// __vector_1 for linker
// __attribute__((signal)) to prevent optimization
void __vector_1(void)  __attribute__((signal));
void __vector_1(void)
{
 45c:	1f 92       	push	r1
 45e:	0f 92       	push	r0
 460:	0f b6       	in	r0, 0x3f	; 63
 462:	0f 92       	push	r0
 464:	11 24       	eor	r1, r1
 466:	2f 93       	push	r18
 468:	3f 93       	push	r19
 46a:	4f 93       	push	r20
 46c:	5f 93       	push	r21
 46e:	6f 93       	push	r22
 470:	7f 93       	push	r23
 472:	8f 93       	push	r24
 474:	9f 93       	push	r25
 476:	af 93       	push	r26
 478:	bf 93       	push	r27
 47a:	ef 93       	push	r30
 47c:	ff 93       	push	r31
	EXTINT_ApfuncEXTINT[EXTINT_INT0]();
 47e:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <EXTINT_ApfuncEXTINT+0x2>
 482:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <EXTINT_ApfuncEXTINT+0x3>
 486:	09 95       	icall
}
 488:	ff 91       	pop	r31
 48a:	ef 91       	pop	r30
 48c:	bf 91       	pop	r27
 48e:	af 91       	pop	r26
 490:	9f 91       	pop	r25
 492:	8f 91       	pop	r24
 494:	7f 91       	pop	r23
 496:	6f 91       	pop	r22
 498:	5f 91       	pop	r21
 49a:	4f 91       	pop	r20
 49c:	3f 91       	pop	r19
 49e:	2f 91       	pop	r18
 4a0:	0f 90       	pop	r0
 4a2:	0f be       	out	0x3f, r0	; 63
 4a4:	0f 90       	pop	r0
 4a6:	1f 90       	pop	r1
 4a8:	18 95       	reti

000004aa <__vector_2>:
/* ISR Function for External Interrupt 0 */
void __vector_2(void)  __attribute__((signal));
void __vector_2(void)
{
 4aa:	1f 92       	push	r1
 4ac:	0f 92       	push	r0
 4ae:	0f b6       	in	r0, 0x3f	; 63
 4b0:	0f 92       	push	r0
 4b2:	11 24       	eor	r1, r1
 4b4:	2f 93       	push	r18
 4b6:	3f 93       	push	r19
 4b8:	4f 93       	push	r20
 4ba:	5f 93       	push	r21
 4bc:	6f 93       	push	r22
 4be:	7f 93       	push	r23
 4c0:	8f 93       	push	r24
 4c2:	9f 93       	push	r25
 4c4:	af 93       	push	r26
 4c6:	bf 93       	push	r27
 4c8:	ef 93       	push	r30
 4ca:	ff 93       	push	r31
	EXTINT_ApfuncEXTINT[EXTINT_INT1]();
 4cc:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <EXTINT_ApfuncEXTINT+0x4>
 4d0:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <EXTINT_ApfuncEXTINT+0x5>
 4d4:	09 95       	icall
}
 4d6:	ff 91       	pop	r31
 4d8:	ef 91       	pop	r30
 4da:	bf 91       	pop	r27
 4dc:	af 91       	pop	r26
 4de:	9f 91       	pop	r25
 4e0:	8f 91       	pop	r24
 4e2:	7f 91       	pop	r23
 4e4:	6f 91       	pop	r22
 4e6:	5f 91       	pop	r21
 4e8:	4f 91       	pop	r20
 4ea:	3f 91       	pop	r19
 4ec:	2f 91       	pop	r18
 4ee:	0f 90       	pop	r0
 4f0:	0f be       	out	0x3f, r0	; 63
 4f2:	0f 90       	pop	r0
 4f4:	1f 90       	pop	r1
 4f6:	18 95       	reti

000004f8 <__vector_3>:
/* ISR Function for External Interrupt 0 */
void __vector_3(void)  __attribute__((signal));
void __vector_3(void)
{
 4f8:	1f 92       	push	r1
 4fa:	0f 92       	push	r0
 4fc:	0f b6       	in	r0, 0x3f	; 63
 4fe:	0f 92       	push	r0
 500:	11 24       	eor	r1, r1
 502:	2f 93       	push	r18
 504:	3f 93       	push	r19
 506:	4f 93       	push	r20
 508:	5f 93       	push	r21
 50a:	6f 93       	push	r22
 50c:	7f 93       	push	r23
 50e:	8f 93       	push	r24
 510:	9f 93       	push	r25
 512:	af 93       	push	r26
 514:	bf 93       	push	r27
 516:	ef 93       	push	r30
 518:	ff 93       	push	r31
	EXTINT_ApfuncEXTINT[EXTINT_INT2]();
 51a:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__bss_end>
 51e:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__bss_end+0x1>
 522:	09 95       	icall
}
 524:	ff 91       	pop	r31
 526:	ef 91       	pop	r30
 528:	bf 91       	pop	r27
 52a:	af 91       	pop	r26
 52c:	9f 91       	pop	r25
 52e:	8f 91       	pop	r24
 530:	7f 91       	pop	r23
 532:	6f 91       	pop	r22
 534:	5f 91       	pop	r21
 536:	4f 91       	pop	r20
 538:	3f 91       	pop	r19
 53a:	2f 91       	pop	r18
 53c:	0f 90       	pop	r0
 53e:	0f be       	out	0x3f, r0	; 63
 540:	0f 90       	pop	r0
 542:	1f 90       	pop	r1
 544:	18 95       	reti

00000546 <GIE_voidGlobalInterruptEnable>:
#define SREG    *((volatile u8*)0x5F)
//enable global interrupt
void GIE_voidGlobalInterruptEnable(void)
{
		//PUT SOME CODE HERE
		SET_BIT(SREG,GICR_INT1);
 546:	8f b7       	in	r24, 0x3f	; 63
 548:	80 68       	ori	r24, 0x80	; 128
 54a:	8f bf       	out	0x3f, r24	; 63
		SET_BIT(SREG,GICR_INT0);
 54c:	8f b7       	in	r24, 0x3f	; 63
 54e:	80 64       	ori	r24, 0x40	; 64
 550:	8f bf       	out	0x3f, r24	; 63
		SET_BIT(SREG,GICR_INT2);
 552:	8f b7       	in	r24, 0x3f	; 63
 554:	80 62       	ori	r24, 0x20	; 32
 556:	8f bf       	out	0x3f, r24	; 63
 558:	08 95       	ret

0000055a <_exit>:
 55a:	f8 94       	cli

0000055c <__stop_program>:
 55c:	ff cf       	rjmp	.-2      	; 0x55c <__stop_program>
